{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Love my Robot \ud83d\udc99 En este proyecto usted utilizara todo su conocimiento aprendido durante el curso, quemocion ! Python Flask Nodejs Javascript Redis* REST Docker Description Usted estara encargado de ense\u00f1ar aquello por lo cual usted aqui, programar, a ni\u00f1os ! Los ni\u00f1os aprenderan a programar a Cozmo , \"The smartest, cutest AI-powered robot you\u2019ve ever seen\". Utilizaremos nuestro propio lenguaje interpreteado llamado LMR (love-my-robot) que estara compuesto de un set de instrucciones limitado por el SDK de Cozmo; algunas categorias de este instruction set seran: Drive: controlaran en que direccion se movera cozmo y qu\u00e9 tan rapido. Actions: para controlar su cara y expresiones, su levanta carga Architecture Overview Services GUI LEX Redis (Opcional) Flow Un GUI para que los ni\u00f1os puedan programar en LMR Una vez estan listos para que el robot ejecute su programa, el programa se envia REST hacia LEX Cozmo Ejecuta el codigo.","title":"Intructions"},{"location":"#love-my-robot","text":"En este proyecto usted utilizara todo su conocimiento aprendido durante el curso, quemocion ! Python Flask Nodejs Javascript Redis* REST Docker","title":"Love my Robot \ud83d\udc99"},{"location":"#description","text":"Usted estara encargado de ense\u00f1ar aquello por lo cual usted aqui, programar, a ni\u00f1os ! Los ni\u00f1os aprenderan a programar a Cozmo , \"The smartest, cutest AI-powered robot you\u2019ve ever seen\". Utilizaremos nuestro propio lenguaje interpreteado llamado LMR (love-my-robot) que estara compuesto de un set de instrucciones limitado por el SDK de Cozmo; algunas categorias de este instruction set seran: Drive: controlaran en que direccion se movera cozmo y qu\u00e9 tan rapido. Actions: para controlar su cara y expresiones, su levanta carga","title":"Description"},{"location":"#architecture-overview","text":"","title":"Architecture Overview"},{"location":"#services","text":"GUI LEX Redis (Opcional)","title":"Services"},{"location":"#flow","text":"Un GUI para que los ni\u00f1os puedan programar en LMR Una vez estan listos para que el robot ejecute su programa, el programa se envia REST hacia LEX Cozmo Ejecuta el codigo.","title":"Flow"},{"location":"cozmo/","text":"Cozmo Instalation Instrucciones Initial Setup Setup API sdk","title":"Cozmo"},{"location":"cozmo/#cozmo","text":"","title":"Cozmo"},{"location":"cozmo/#instalation","text":"Instrucciones","title":"Instalation"},{"location":"cozmo/#initial-setup","text":"Setup","title":"Initial Setup"},{"location":"cozmo/#api","text":"sdk","title":"API"},{"location":"examples/","text":"hello Cozmo flask non async #!/usr/bin/env python3 import cozmo from flask import Flask app = Flask(__name__) def cozmo_program(robot: cozmo.robot.Robot): robot.say_text( Hello Flask ).wait_for_completed() @app.route('/') def hello_world(): cozmo.run_program(cozmo_program) return 'Hello, World!' if __name__ == __main__ : app.run(host= 0.0.0.0 ) Live Code Editor si toman otro approach y dejan que los usuarios escriban su codigo les dejo este HTML que embebe un live code editor y aqui la documentacion Click to expand! !DOCTYPE html html lang= en head title ACE in Action /title style type= text/css media= screen #editor { position: absolute; top: 0; right: 0; bottom: 0; left: 0; } /style /head body div id= editor function foo(items) { var x = All this is syntax highlighted ; return x; } /div script src= https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.6/ace.js /script script var editor = ace.edit( editor ); editor.setTheme( ace/theme/monokai ); editor.session.setMode( ace/mode/javascript ); /script /body /html ToDo List Les entrego un To DO list hecho en html y javascript, les puede servir para ir \"agregando\" lineas a su programa. Obviamente aqui el source de los elementos es un text-box. Click to expand! !DOCTYPE html html head meta charset= utf-8 meta name= viewport content= width=device-width, initial-scale=1.0, user-scalable=yes /head body input id= task button id= add Add /button hr div id= todos /div script function get_todos() { var todos = new Array; var todos_str = localStorage.getItem('todo'); if (todos_str !== null) { todos = JSON.parse(todos_str); } return todos; } function add() { var task = document.getElementById('task').value; var todos = get_todos(); todos.push(task); localStorage.setItem('todo', JSON.stringify(todos)); show(); return false; } function remove() { var id = this.getAttribute('id'); var todos = get_todos(); todos.splice(id, 1); localStorage.setItem('todo', JSON.stringify(todos)); show(); return false; } function show() { var todos = get_todos(); var html = ' ul '; for(var i=0; i todos.length; i++) { html += ' li ' + todos[i] + ' button class= remove id= ' + i + ' x /button /li '; }; html += ' /ul '; document.getElementById('todos').innerHTML = html; var buttons = document.getElementsByClassName('remove'); for (var i=0; i buttons.length; i++) { buttons[i].addEventListener('click', remove); }; } document.getElementById('add').addEventListener('click', add); show(); /script /body /html Python Callbacks from a dictionary of functions def do_ping(self, arg): return 'Pong, {0}!'.format(arg) def do_ls(self, arg): return '\\n'.join(os.listdir(arg)) dispatch = { 'ping': do_ping, 'ls': do_ls, } def process_network_command(command, arg): send(dispatch[command](arg)) quizas le pueda servir para ahorrase ese \" if: elif: gigante\"","title":"Examples"},{"location":"examples/#hello-cozmo-flask-non-async","text":"#!/usr/bin/env python3 import cozmo from flask import Flask app = Flask(__name__) def cozmo_program(robot: cozmo.robot.Robot): robot.say_text( Hello Flask ).wait_for_completed() @app.route('/') def hello_world(): cozmo.run_program(cozmo_program) return 'Hello, World!' if __name__ == __main__ : app.run(host= 0.0.0.0 )","title":"hello Cozmo flask non async"},{"location":"examples/#live-code-editor","text":"si toman otro approach y dejan que los usuarios escriban su codigo les dejo este HTML que embebe un live code editor y aqui la documentacion Click to expand! !DOCTYPE html html lang= en head title ACE in Action /title style type= text/css media= screen #editor { position: absolute; top: 0; right: 0; bottom: 0; left: 0; } /style /head body div id= editor function foo(items) { var x = All this is syntax highlighted ; return x; } /div script src= https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.6/ace.js /script script var editor = ace.edit( editor ); editor.setTheme( ace/theme/monokai ); editor.session.setMode( ace/mode/javascript ); /script /body /html","title":"Live Code Editor"},{"location":"examples/#todo-list","text":"Les entrego un To DO list hecho en html y javascript, les puede servir para ir \"agregando\" lineas a su programa. Obviamente aqui el source de los elementos es un text-box. Click to expand! !DOCTYPE html html head meta charset= utf-8 meta name= viewport content= width=device-width, initial-scale=1.0, user-scalable=yes /head body input id= task button id= add Add /button hr div id= todos /div script function get_todos() { var todos = new Array; var todos_str = localStorage.getItem('todo'); if (todos_str !== null) { todos = JSON.parse(todos_str); } return todos; } function add() { var task = document.getElementById('task').value; var todos = get_todos(); todos.push(task); localStorage.setItem('todo', JSON.stringify(todos)); show(); return false; } function remove() { var id = this.getAttribute('id'); var todos = get_todos(); todos.splice(id, 1); localStorage.setItem('todo', JSON.stringify(todos)); show(); return false; } function show() { var todos = get_todos(); var html = ' ul '; for(var i=0; i todos.length; i++) { html += ' li ' + todos[i] + ' button class= remove id= ' + i + ' x /button /li '; }; html += ' /ul '; document.getElementById('todos').innerHTML = html; var buttons = document.getElementsByClassName('remove'); for (var i=0; i buttons.length; i++) { buttons[i].addEventListener('click', remove); }; } document.getElementById('add').addEventListener('click', add); show(); /script /body /html","title":"ToDo List"},{"location":"examples/#python-callbacks-from-a-dictionary-of-functions","text":"def do_ping(self, arg): return 'Pong, {0}!'.format(arg) def do_ls(self, arg): return '\\n'.join(os.listdir(arg)) dispatch = { 'ping': do_ping, 'ls': do_ls, } def process_network_command(command, arg): send(dispatch[command](arg)) quizas le pueda servir para ahorrase ese \" if: elif: gigante\"","title":"Python Callbacks from a dictionary of functions"},{"location":"extras/","text":"Puntos Extra LMR play_song image recognition or Pets World Functions or This or Objects Detect other Cozmo Stack cubes.","title":"Puntos Extras"},{"location":"extras/#puntos-extra","text":"","title":"Puntos Extra"},{"location":"extras/#lmr","text":"play_song image recognition or Pets World Functions or This or Objects Detect other Cozmo Stack cubes.","title":"LMR"},{"location":"getting_started/","text":"Comenzar Este documento provee informacion de como comenzar su proyecto y como comenzar a desarrollar: Este seguro que ha leido todas las instrucciones Haga FORK de este repositorio Inicie a programar. Entrega La entrega sera presencial TODOS deberan presentarse Si alguien falta tendra 0 automaticamente, NO HABRA EXCEPCIONES (ni viaje, ni enfermedad, ni accidentes) TODOS Deben de tener commits, es la unica forma que puedo comprobar que trabajaron. TODOS deben de poder defender todo el proyecto, no existira tal como \"es que yo solo hice esto o aquello\", la nota individual de cada integrante afectara al grupo .","title":"Getting Started"},{"location":"getting_started/#comenzar","text":"Este documento provee informacion de como comenzar su proyecto y como comenzar a desarrollar: Este seguro que ha leido todas las instrucciones Haga FORK de este repositorio Inicie a programar.","title":"Comenzar"},{"location":"getting_started/#entrega","text":"La entrega sera presencial TODOS deberan presentarse Si alguien falta tendra 0 automaticamente, NO HABRA EXCEPCIONES (ni viaje, ni enfermedad, ni accidentes) TODOS Deben de tener commits, es la unica forma que puedo comprobar que trabajaron. TODOS deben de poder defender todo el proyecto, no existira tal como \"es que yo solo hice esto o aquello\", la nota individual de cada integrante afectara al grupo .","title":"Entrega"},{"location":"gui/","text":"GUI En esta interfaz se podra programar de una manera: intuitiva que sea facil de ubicar cada elemento para un nino (colores, etc etc) El usuario tendra un white board donde podra armar su programa en LMR , este whiteboard e interfaz puede tener 2 opciones excluyentes (pero no limitado a estos 2, si usted tiene una mejor maner de hacerlo es bienvenido a utillizar su manera) Restricted: Select = Click = Add predefined instructions; el usuario puede seleccionar de varias dropdowns de categorias cu\u00e1l instruccion desea a\u00f1adir. (esta es la opcion que se muestra en el mock ). Agregue un ToDO list como ejemplo de como puede anadir elementos on the fly. Free Mode: un modo mas avanzado, en donde se tendra siempre una lista (pero sera mas como ayuda), pero el usuario podra programar en un \"Live Text Editor\" UI Mock Observe como la categorias estan arriba del scratchboard vea la opcion de \"X\" de remover cada linea. Cada categoria tendra su lista de comandos soportados Hay un boton de \"Ejecutar\" (obligatorio) que enviara su codigo hacia Lex No habra mas rutas que / , almenos que usted lo quiera distinto. A mockup is a visual way of representing a product, it is not written in stone, feel free to change, add, remove whatever you need to. Requirements DEBE estar escrito y hecho en NodeJS (Express JS) Para el frontend puede utilizar Javascript como considere necesario Puede usar Server Side rendering y usar algun template engine , como recomendacion vea: Mustache o Jade (Pug)","title":"GUI"},{"location":"gui/#gui","text":"En esta interfaz se podra programar de una manera: intuitiva que sea facil de ubicar cada elemento para un nino (colores, etc etc) El usuario tendra un white board donde podra armar su programa en LMR , este whiteboard e interfaz puede tener 2 opciones excluyentes (pero no limitado a estos 2, si usted tiene una mejor maner de hacerlo es bienvenido a utillizar su manera) Restricted: Select = Click = Add predefined instructions; el usuario puede seleccionar de varias dropdowns de categorias cu\u00e1l instruccion desea a\u00f1adir. (esta es la opcion que se muestra en el mock ). Agregue un ToDO list como ejemplo de como puede anadir elementos on the fly. Free Mode: un modo mas avanzado, en donde se tendra siempre una lista (pero sera mas como ayuda), pero el usuario podra programar en un \"Live Text Editor\"","title":"GUI"},{"location":"gui/#ui-mock","text":"Observe como la categorias estan arriba del scratchboard vea la opcion de \"X\" de remover cada linea. Cada categoria tendra su lista de comandos soportados Hay un boton de \"Ejecutar\" (obligatorio) que enviara su codigo hacia Lex No habra mas rutas que / , almenos que usted lo quiera distinto. A mockup is a visual way of representing a product, it is not written in stone, feel free to change, add, remove whatever you need to.","title":"UI Mock"},{"location":"gui/#requirements","text":"DEBE estar escrito y hecho en NodeJS (Express JS) Para el frontend puede utilizar Javascript como considere necesario Puede usar Server Side rendering y usar algun template engine , como recomendacion vea: Mustache o Jade (Pug)","title":"Requirements"},{"location":"lex/","text":"Lex Lex es un API escrito en Python que se encargara de: Leer Codigo LMR Transpilar (traducir) LMR a Python Routes Lex sera el API responsable de \"Transpilar\" su codigo escrito en LMR. Tendra 2 @routes (no esta limitado a estos 2 unicamente, usted puede agregarle mas) / /lex /root El root sera endpoint grafico que desplegara: el codigo Python Transpilado y la hora que fue hecho el request. note que se muestra el TimeStamp de cuando fue transpilado /lex POST endpoint para Procesar/ Ejecutar el codigo. Recibe LMR = [Lex] = Transpile to Python = [Execute to Cozmo] El codigo vendra en el request payload 1 { request_timestamp : Sun Nov 3 01:42:41 CST 2019 , lmr : SAY HI\\nMOVE 50 100 } Obviamente debe devolver un status code dependiendo del resultado de ejecutar el programa. 1 : Ojo que se puede utilizar Redis para evitar enviar una llamada REST y utilizar canales real-time. Extra functions Cada vez que Lex traduzca un programa debera: guardar el archivo generado dentro de un directorio transpiled/ con el siguiente formato: lmr_lex_2019_11_3-11_18.py Debe devolver un status code que indique al GUI que se transpilo satisfactoriamente. Puede usar asyncio (async /await) para responder y ejecutar de una manera asincrona. Transpilers , or source-to-source compilers, are tools that read source code written in one programming language, and produce the equivalent code in another language.","title":"Lex API"},{"location":"lex/#lex","text":"Lex es un API escrito en Python que se encargara de: Leer Codigo LMR Transpilar (traducir) LMR a Python","title":"Lex"},{"location":"lex/#routes","text":"Lex sera el API responsable de \"Transpilar\" su codigo escrito en LMR. Tendra 2 @routes (no esta limitado a estos 2 unicamente, usted puede agregarle mas) / /lex","title":"Routes"},{"location":"lex/#root","text":"El root sera endpoint grafico que desplegara: el codigo Python Transpilado y la hora que fue hecho el request. note que se muestra el TimeStamp de cuando fue transpilado","title":"/root"},{"location":"lex/#lex_1","text":"POST endpoint para Procesar/ Ejecutar el codigo. Recibe LMR = [Lex] = Transpile to Python = [Execute to Cozmo] El codigo vendra en el request payload 1 { request_timestamp : Sun Nov 3 01:42:41 CST 2019 , lmr : SAY HI\\nMOVE 50 100 } Obviamente debe devolver un status code dependiendo del resultado de ejecutar el programa. 1 : Ojo que se puede utilizar Redis para evitar enviar una llamada REST y utilizar canales real-time.","title":"/lex"},{"location":"lex/#extra-functions","text":"Cada vez que Lex traduzca un programa debera: guardar el archivo generado dentro de un directorio transpiled/ con el siguiente formato: lmr_lex_2019_11_3-11_18.py Debe devolver un status code que indique al GUI que se transpilo satisfactoriamente. Puede usar asyncio (async /await) para responder y ejecutar de una manera asincrona. Transpilers , or source-to-source compilers, are tools that read source code written in one programming language, and produce the equivalent code in another language.","title":"Extra functions"},{"location":"lmr/","text":"Love My Robot (LMR) Pseudo Code Habra categorias de comandos en LMR: Actions : Say Text picking up an object etc SAY Hello # Math functions ;) # Cozmo will SAY the result of the operation MATH 1+2 MATH 3-1 MATH (5/2) * 4 # COUNT # Cozmo will count saying the numbers from 1 to NUMBER COUNT 10 # YES # Cozmo is very optimistic so he only can say YES with his head. YES # SOUND # play only 1 sound from cozmo.audio.AudioEvents, choose one sound that will identify your Cozmo, for example it will Play 'MusicTinyOrchestraInit' SOUND \"Actions encapsulate specific high-level tasks that the Cozmo robot can perform. They have a definite beginning and end. These tasks include picking up an object, saying text, math etc.\" Drive: drive Xmm at Ymm/s turn 90deg at 100 deg/s drive -Xmm at Ymm/s lift # DRIVE_OFF [drive_off_charger_contacts] # Tells Cozmo to drive forward slightly to get off the charger contacts. DRIVE_OFF # MOVE_FUNCS (amount, velocity) [drive_straight] # amount: milimteres (mm) | velocity: milimiters/sec (mm/s) # amount 0 forward; amount 0 backwards # if no velocity provided move at a default velocity MOVE 150 50 # move 100 mm backwards at 50 mm/s MOVE -100 50 # TURN (amount, velocity) [turn_in_place] # amount: degrees (deg) | velocity: degrees/sec (deg/s) # amount 0 clockwise; amount 0 anticlockwise # if no velocity provided move at a default velocity TURN 90 100 # LIFT (height) # height: percentage 0.0 (botton) to 1.0 (top) LIFT 0.8 Animations: Lights Playing Animation Sleep Smile, etc World Cubes # turn on Cozmo's backpack light some color (red, green, blue, white, off) [set_all_backpack_lights] LIGHT RED LIGHT BLUE LIGHT OFF # Play an animation from [Triggers](http://cozmosdk.anki.com/docs/generated/cozmo.anim.html#cozmo.anim.Triggers) [play_anim_trigger], beware you might need to limit the list of Trigger Names (Happy, Sad,, etc ); There are 574 Triggers so limit it to 5 at least. ANIMATION CubePounceLoseSession # Cubes animations CUBE1_LIGHT RED CUBE2_LIGHT BLUE CUBE3_LIGHT GREEN # PICKUP (CUBE id) [pickup_object] # Tells Cozmo to pickup a cube (1 to 3) PICKUP 3 # DROP [place_object_on_ground_here] # Ask Cozmo to place the object he is carrying on the ground at the current location. DROP # ROLL_CUBE (CUBE id) [roll_cube] # will roll a specified cube (1 to 3) # Roll 1st cube ROLL_CUBE 1 # WHEELIE [pop_a_wheelie] # perform a wheelie using a cube WHEELIE 2 Extras Usted esta en toda disposicion de agregar mas instrucciones si asi lo desea.","title":"LMR"},{"location":"lmr/#love-my-robot-lmr-pseudo-code","text":"Habra categorias de comandos en LMR:","title":"Love My Robot (LMR) Pseudo Code"},{"location":"lmr/#actions","text":"Say Text picking up an object etc SAY Hello # Math functions ;) # Cozmo will SAY the result of the operation MATH 1+2 MATH 3-1 MATH (5/2) * 4 # COUNT # Cozmo will count saying the numbers from 1 to NUMBER COUNT 10 # YES # Cozmo is very optimistic so he only can say YES with his head. YES # SOUND # play only 1 sound from cozmo.audio.AudioEvents, choose one sound that will identify your Cozmo, for example it will Play 'MusicTinyOrchestraInit' SOUND \"Actions encapsulate specific high-level tasks that the Cozmo robot can perform. They have a definite beginning and end. These tasks include picking up an object, saying text, math etc.\"","title":"Actions:"},{"location":"lmr/#drive","text":"drive Xmm at Ymm/s turn 90deg at 100 deg/s drive -Xmm at Ymm/s lift # DRIVE_OFF [drive_off_charger_contacts] # Tells Cozmo to drive forward slightly to get off the charger contacts. DRIVE_OFF # MOVE_FUNCS (amount, velocity) [drive_straight] # amount: milimteres (mm) | velocity: milimiters/sec (mm/s) # amount 0 forward; amount 0 backwards # if no velocity provided move at a default velocity MOVE 150 50 # move 100 mm backwards at 50 mm/s MOVE -100 50 # TURN (amount, velocity) [turn_in_place] # amount: degrees (deg) | velocity: degrees/sec (deg/s) # amount 0 clockwise; amount 0 anticlockwise # if no velocity provided move at a default velocity TURN 90 100 # LIFT (height) # height: percentage 0.0 (botton) to 1.0 (top) LIFT 0.8","title":"Drive:"},{"location":"lmr/#animations","text":"Lights Playing Animation Sleep Smile, etc World Cubes # turn on Cozmo's backpack light some color (red, green, blue, white, off) [set_all_backpack_lights] LIGHT RED LIGHT BLUE LIGHT OFF # Play an animation from [Triggers](http://cozmosdk.anki.com/docs/generated/cozmo.anim.html#cozmo.anim.Triggers) [play_anim_trigger], beware you might need to limit the list of Trigger Names (Happy, Sad,, etc ); There are 574 Triggers so limit it to 5 at least. ANIMATION CubePounceLoseSession # Cubes animations CUBE1_LIGHT RED CUBE2_LIGHT BLUE CUBE3_LIGHT GREEN # PICKUP (CUBE id) [pickup_object] # Tells Cozmo to pickup a cube (1 to 3) PICKUP 3 # DROP [place_object_on_ground_here] # Ask Cozmo to place the object he is carrying on the ground at the current location. DROP # ROLL_CUBE (CUBE id) [roll_cube] # will roll a specified cube (1 to 3) # Roll 1st cube ROLL_CUBE 1 # WHEELIE [pop_a_wheelie] # perform a wheelie using a cube WHEELIE 2","title":"Animations:"},{"location":"lmr/#extras","text":"Usted esta en toda disposicion de agregar mas instrucciones si asi lo desea.","title":"Extras"},{"location":"redis/","text":"Redis (Opcional) Hashes Redis puede almacenar diferentes objetos, quizas podrian almacenar el diccionario/JSON de funciones LMR desde LEX LEX (funciones) = REDIS = GUI De esa forma LEX y GUI tendra el mismo set de funciones LMR. Pub/Sub Redis es capaz de brindar una experiencia para aplicaciones real-time usando algo que se conoce como Pub/Sub (publish/subscribe) Algunos documentos: - 1 - Docu - Redis Labs Para que podria usar PubSub? para desde el GUI publicar hacia un canal en donde Lex API este subscrito y asi poder mandar el codigo en LMR de una manera facil. Resources les ejo algunos recursos que les podrian servir redisworks","title":"Redis"},{"location":"redis/#redis-opcional","text":"","title":"Redis (Opcional)"},{"location":"redis/#hashes","text":"Redis puede almacenar diferentes objetos, quizas podrian almacenar el diccionario/JSON de funciones LMR desde LEX LEX (funciones) = REDIS = GUI De esa forma LEX y GUI tendra el mismo set de funciones LMR.","title":"Hashes"},{"location":"redis/#pubsub","text":"Redis es capaz de brindar una experiencia para aplicaciones real-time usando algo que se conoce como Pub/Sub (publish/subscribe) Algunos documentos: - 1 - Docu - Redis Labs Para que podria usar PubSub? para desde el GUI publicar hacia un canal en donde Lex API este subscrito y asi poder mandar el codigo en LMR de una manera facil.","title":"Pub/Sub"},{"location":"redis/#resources","text":"les ejo algunos recursos que les podrian servir redisworks","title":"Resources"}]}